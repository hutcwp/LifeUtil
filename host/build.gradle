apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'

android {
    compileSdkVersion 28


    defaultConfig {
        applicationId "com.hutcwp.host"
        minSdkVersion 23
        targetSdkVersion 28
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        kapt {
            arguments {
                arg("AROUTER_MODULE_NAME", project.getName())
            }
        }
    }

    buildTypes {
        release {
            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'

            applicationVariants.all { variant ->
                variant.outputs.each { output ->
                    def date = new Date()
                    def formattedDate = date.format('yyyyMMddHHmmss')
//                    output.outputFile = new File(output.outputFile.parent,
//                            output.outputFile.name.replace("-release", "-" + formattedDate)
//                            //for Debug use output.outputFile = new File(output.outputFile.parent,
//                            //                             output.outputFile.name.replace("-debug", "-" + formattedDate)
//                    )
                }
            }
        }

        debug {
            applicationVariants.all { variant ->

                variant.outputs.each { output ->

                }
            }
        }
    }

    applicationVariants.all { variant ->
        variant.outputs.all {
            def flavor = variant.name
            def versionName = variant.versionName
            def date = new Date()
            def formattedDate = date.format('yyyy_MM_dd_HH_mm_ss')
            outputFileName = rootProject.getName() + "prefix_${flavor}_${versionName}_${formattedDate}.apk"
            println(outputFileName)
        }
    }

}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])

    implementation 'androidx.appcompat:appcompat:1.0.2'
    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'androidx.test:runner:1.2.0'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.2.0'
    compile "androidx.core:core-ktx:1.0.2"
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"

    implementation 'com.alibaba:arouter-api:1.5.0'
    annotationProcessor 'com.alibaba:arouter-compiler:1.2.2'
    kapt 'com.alibaba:arouter-compiler:1.2.2'

    //用于chrome远程调试
    implementation 'com.facebook.stetho:stetho:1.5.0'
    debugImplementation 'com.squareup.leakcanary:leakcanary-android:2.2'

//    implementation project(path: ':cartoon')
    implementation project(path: ':base')
    implementation project(path: ':homepage')
//    implementation project(path: ':read')
//    implementation project(path: ':weather')
    implementation project(path: ':game')
//    implementation project(path: ':live')
//    implementation project(path: ':blog')
    // 本地异常捕捉框架：https://github.com/Ereza/CustomActivityOnCrash
    implementation 'cat.ereza:customactivityoncrash:2.2.0'
}
repositories {
    mavenCentral()
}

//auto register extension
// 功能介绍：
//  在编译期扫描将打到apk包中的所有类
//  将 scanInterface的实现类 或 scanSuperClasses的子类
//  并在 codeInsertToClassName 类的 codeInsertToMethodName 方法中生成如下代码：
//  codeInsertToClassName.registerMethodName(scanInterface)
// 要点：
//  1. codeInsertToMethodName 若未指定，则默认为static块
//  2. codeInsertToMethodName 与 registerMethodName 需要同为static或非static
// 自动生成的代码示例：
/*
  在com.billy.app_lib_interface.MainPageManager.class文件中
  static
  {
    register(new CategoryA()); //scanInterface的实现类
    register(new CategoryB()); //scanSuperClass的子类
  }
 */
apply plugin: 'auto-register'
project.ext.registerInfoList = [
        [
                'scanInterface'          : 'me.hutcwp.auto.IMainPage'
                // scanSuperClasses 会自动被加入到exclude中，下面的exclude只作为演示，其实可以不用手动添加
                , 'scanSuperClasses'     : ['com.billy.android.autoregister.demo.BaseCategory']
                , 'codeInsertToClassName': 'me.hutcwp.auto.MainPageManager'
                //未指定codeInsertToMethodName，默认插入到static块中，故此处register必须为static方法
                , 'registerMethodName'   : 'register' //
                , 'exclude'              : [
                //排除的类，支持正则表达式（包分隔符需要用/表示，不能用.）
                'com.billy.android.autoregister.demo.BaseCategory'.replaceAll('\\.', '/') //排除这个基类
        ]
        ],
        [
                'scanInterface'           : 'me.hutcwp.IMainPage'
                , 'codeInsertToClassName' : 'com.hutcwp.host.MainPageManager'
                , 'codeInsertToMethodName': 'init' //非static方法
                , 'registerMethodName'    : 'register' //非static方法
        ]
]

autoregister {
    registerInfo = registerInfoList
    cacheEnabled = true
}


assemble.doLast {
    println "after assemble assemble"

    //查找上传的apk文件
    def apkDir = new File("build/outputs/apk/release")
//    def apkDir = new File("build/outputs/apk/debug")
    if (!apkDir.exists()) {
        throw new RuntimeException("apk output path not exists!")
    }

    def apk = null
    for (int i = apkDir.listFiles().length - 1; i >= 0; i--) {
        File file = apkDir.listFiles()[i]
        if (file.name.endsWith(".apk")) {
            apk = file
            break
        }
    }
    if (apk == null) {
        throw new RuntimeException("apk file not exists!")
    }

    print("apk is " + apk.name)

}